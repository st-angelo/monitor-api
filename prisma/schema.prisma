// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String          @id @default(uuid())
  name                 String
  nickname             String?
  email                String          @unique
  role                 UserRole        @default(User)
  isVerified           Boolean         @default(false)
  avatarUrl            String?
  password             String
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  verifyToken          String?
  UserPreference       UserPreference?
  Category             Category[]
  Transaction          Transaction[]

  @@index([email])
}

model UserPreference {
  id             String   @id @default(uuid())
  baseCurrencyId String
  baseCurrency   Currency @relation(fields: [baseCurrencyId], references: [id])
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])

  @@index([baseCurrencyId])
}

model Currency {
  id             String           @id @default(uuid())
  code           String           @unique
  implicit       Boolean          @default(false)
  active         Boolean          @default(true)
  Transaction    Transaction[]
  UserPreference UserPreference[]

  @@index([code])
}

model Transaction {
  id          String          @id @default(uuid())
  typeId      String
  type        TransactionType @relation(fields: [typeId], references: [id])
  amount      Float
  date        DateTime
  description String?
  added       DateTime        @default(now())
  currencyId  String
  currency    Currency        @relation(fields: [currencyId], references: [id])
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  recurrence  Recurrence?
  propagated  Boolean?
  sourceId    String?
  source      Transaction?    @relation("source", fields: [sourceId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Transaction Transaction[]   @relation("source")

  @@index([typeId])
  @@index([currencyId])
  @@index([categoryId])
  @@index([userId])
  @@index([sourceId])
}

model Category {
  id                String          @id @default(uuid())
  code              String?
  name              String?
  description       String?
  color             String
  transactionTypeId String
  transactionType   TransactionType @relation(fields: [transactionTypeId], references: [id])
  userId            String?
  user              User?           @relation(fields: [userId], references: [id])
  Transaction       Transaction[]

  @@unique([userId, name, transactionTypeId])
  @@index([transactionTypeId])
}

model TransactionType {
  id          String        @id @default(uuid())
  code        String        @unique
  implicit    Boolean       @default(false)
  active      Boolean       @default(true)
  Transaction Transaction[]
  Category    Category[]
}

// Enums
enum UserRole {
  User
}

enum Recurrence {
  Weekly
  Monthly
  Quarterly
  Yearly
}
